$ valgrind --leak-check=full ./app/shell-app


==4797== Memcheck, a memory error detector
==4797== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==4797== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info
==4797== Command: ./app/shell-app
==4797== 
Averaged sensor reading: 10
==4797== Conditional jump or move depends on uninitialised value(s)
==4797==    at 0x401C4F: main (in /home/viki/Documents/ENPM808X/Week6/ExtraCredit/valgrind/cpp-boilerplate-valgrind/build/app/shell-app)
==4797== 
==4797== 
==4797== HEAP SUMMARY:
==4797==     in use at exit: 44 bytes in 2 blocks
==4797==   total heap usage: 2 allocs, 0 frees, 44 bytes allocated
==4797== 
==4797== 44 (24 direct, 20 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==4797==    at 0x4C2B0E0: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4797==    by 0x401D4B: AnalogSensor::Read() (in /home/viki/Documents/ENPM808X/Week6/ExtraCredit/valgrind/cpp-boilerplate-valgrind/build/app/shell-app)
==4797==    by 0x401C22: main (in /home/viki/Documents/ENPM808X/Week6/ExtraCredit/valgrind/cpp-boilerplate-valgrind/build/app/shell-app)
==4797== 
==4797== LEAK SUMMARY:
==4797==    definitely lost: 24 bytes in 1 blocks
==4797==    indirectly lost: 20 bytes in 1 blocks
==4797==      possibly lost: 0 bytes in 0 blocks
==4797==    still reachable: 0 bytes in 0 blocks
==4797==         suppressed: 0 bytes in 0 blocks
==4797== 
==4797== For counts of detected and suppressed errors, rerun with: -v
==4797== Use --track-origins=yes to see where uninitialised values come from
==4797== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)





BUG #1:
bool terminator; -- Boolean not initialized

BUG #2:
new std::vector<int> call -- C-style pointer not handled properly
